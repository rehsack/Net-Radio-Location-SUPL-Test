#!/usr/bin/perl -w

use strict;
use warnings;

use 5.010;

use Carp qw/croak/;
use File::ConfigDir qw(:ALL);
use Config::Any;
use File::Find::Rule;
use Log::Any::Adapter;
use Log::Any qw($log);
use Params::Util qw(_ARRAY);

require SUPL::MainLoop;
require SUPL::DBusObject;

sub get_config
{
    # find config file
    my @cfg_dirs    = config_dirs();
    my @cfg_pattern = map { "supl-test." . $_ } Config::Any->extensions();
    my @cfg_files   = File::Find::Rule->file()->name(@cfg_pattern)->maxdepth(1)->in(@cfg_dirs);

    # default config
    my %cfg = (
                "dbus-objects" => {
                              "default"     => { "bus-name"    => "org.vfnet.supl", },
                              "RecvPushMsg" => { "object-path" => "/org/vfnet/supl/PushConsumer", },
                              "Translator"  => { "object-path" => "/org/vfnet/supl/Translator", },
                                  }
              );

    if (@cfg_files)
    {

        # read config file
        my $all_cfg = Config::Any->load_files(
                                               {
                                                 files           => [@cfg_files],
                                                 use_ext         => 1,
                                                 flatten_to_hash => 1,
                                               }
                                             );

        foreach my $filename (@cfg_files)
        {
            defined( $all_cfg->{$filename} )
              or next;    # file not found or not parsable ...
            %cfg =
              ( %cfg, %{ $all_cfg->{$filename} } )
              ;           # merge into default and previous loaded config ...
        }
    }

    return %cfg;
}

sub setup_log_Log4perl
{
    my %cfg = @_;

    eval { require Log::Log4perl; } or croak($@);

    Log::Log4perl->import();

    if ( scalar( keys %cfg ) > 1 )
    {
        croak("Please choose exactly one initialization method");
    }
    elsif ( scalar( keys %cfg ) == 1 )
    {
        my $init_method = ( keys %cfg )[0];
        my @init_params;
        if ( defined( $cfg{$init_method} ) )
        {
            @init_params =
              _ARRAY( $cfg{$init_method} ) ? @{ $cfg{$init_method} } : ( $cfg{$init_method} );
        }
        Log::Log4perl->$init_method(@init_params);
    }
    else
    {
        #avoid error message about $Log::Log4perl::WARN used only once
        defined($Log::Log4perl::WARN)
          and Log::Log4perl->easy_init($Log::Log4perl::WARN);
    }

    return;
}

sub setup_logging
{
    my %cfg = @_;

    if ( defined( $cfg{"adapter"} ) )
    {
        my $log_adapter_setup = "setup_log_" . $cfg{"adapter"};
        __PACKAGE__->can($log_adapter_setup)
          or croak( "Don't know how to setup " . $cfg{"adapter"} );
        &{ \&{$log_adapter_setup} }( %{ $cfg{ $cfg{"adapter"} } } );
        Log::Any::Adapter->set( $cfg{"adapter"} );
    }

    return;
}

sub setup_dbus
{
    my %cfg = @_;

    defined( $cfg{"default"} )
      and SUPL::DBusObject::set_default_config( %{ $cfg{"default"} } );

    my @dbusObjects = grep { $_ ne "default" } keys %cfg;
    foreach my $dbusObj (@dbusObjects)
    {
        my $module = "SUPL::DBusObject::$dbusObj";
        eval "require $module;";
        $@ and die $@;
        my $dbusIf = $module->new( %{ $cfg{$dbusObj} } );
        $dbusIf or die "Can't initialize $module";
    }

    return;
}

sub setup
{
    my %cfg = get_config();

    setup_logging( %{ $cfg{"logging"} } );
    setup_dbus( %{ $cfg{"dbus-objects"} } );
}

setup();

SUPL::MainLoop->run();
