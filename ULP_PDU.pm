# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.

package ULP_PDU;
use base qw(Exporter);
use base qw(DynaLoader);
package ULP_PDUc;
bootstrap ULP_PDU;
package ULP_PDU;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package ULP_PDU;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package ULP_PDU;

*encode_ulp_pdu = *ULP_PDUc::encode_ulp_pdu;
*decode_ulp_pdu = *ULP_PDUc::decode_ulp_pdu;

############# Class : ULP_PDU::ULP_PDU_t ##############

package ULP_PDU::ULP_PDU_t;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( ULP_PDU );
%OWNER = ();
%ITERATORS = ();
*swig_length_get = *ULP_PDUc::ULP_PDU_t_length_get;
*swig_length_set = *ULP_PDUc::ULP_PDU_t_length_set;
*swig_version_get = *ULP_PDUc::ULP_PDU_t_version_get;
*swig_version_set = *ULP_PDUc::ULP_PDU_t_version_set;
*swig_sessionID_get = *ULP_PDUc::ULP_PDU_t_sessionID_get;
*swig_sessionID_set = *ULP_PDUc::ULP_PDU_t_sessionID_set;
*swig_message_get = *ULP_PDUc::ULP_PDU_t_message_get;
*swig_message_set = *ULP_PDUc::ULP_PDU_t_message_set;
*swig__asn_ctx_get = *ULP_PDUc::ULP_PDU_t__asn_ctx_get;
*swig__asn_ctx_set = *ULP_PDUc::ULP_PDU_t__asn_ctx_set;
sub new {
    my $pkg = shift;
    my $self = ULP_PDUc::new_ULP_PDU_t(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        ULP_PDUc::delete_ULP_PDU_t($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : ULP_PDU::_MsgBuffer ##############

package ULP_PDU::_MsgBuffer;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( ULP_PDU );
%OWNER = ();
%ITERATORS = ();
*swig_buf_get = *ULP_PDUc::_MsgBuffer_buf_get;
*swig_buf_set = *ULP_PDUc::_MsgBuffer_buf_set;
*swig_size_get = *ULP_PDUc::_MsgBuffer_size_get;
*swig_size_set = *ULP_PDUc::_MsgBuffer_size_set;
sub new {
    my $pkg = shift;
    my $self = ULP_PDUc::new__MsgBuffer(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        ULP_PDUc::delete__MsgBuffer($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package ULP_PDU;

1;
